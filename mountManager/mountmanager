#!/usr/bin/env python3

import gi, os, time
gi.require_version('Gtk', '3.0')

from gi.repository import Gtk
from gi.repository import Gdk
from gi.repository.Gdk import Color

def run(c):
    """ Verbose popen wrapper """
    print("Running:")
    print(c)
    return os.popen(c)

class MyStatusIconApp:
    def __init__(self,protected):
        self.protected=protected # protected, unmountable if this is in blockName
        self.status_icon = Gtk.StatusIcon()
        picturePath = os.path.join(os.path.dirname(os.path.realpath(__file__)),"pic.png")
        self.status_icon.set_from_file(picturePath)
        self.status_icon.connect("popup-menu", self.right_click_event)
        self.status_icon.connect("activate", self.left_click_event)
        self.blockData={} # block data
        # colors
        x = 40000
        self.protectedFgColor = Color(x,x,x)
        self.normalFgColor = Color(0,x,0)
        self.unmountableColor = Color(x,0,0)
        self.mountableColor = Color(0,x,0)

        self.button = Gtk.Button(label="Click Here")
        self.buttonConnect= self.button.connect("clicked", lambda x: print("button"))

    def parseUdisk(self, block):
        """ Return dictionary of information about /dev/{block} """
        # get detailed udisk info
        udisk = run("udisksctl info -b /dev/{0}".format(block)).readlines()
        # only take entries with ":" and defined field
        udisk = [s[:-1].replace(" ","") for s in udisk if len(s.split(":"))==2]
        # parse to dictionary
        udisk = {s.split(":")[0]:"".join(s.split(":")[1:]) for s in udisk}
        # also add block address
        udisk["name"] = block
        udisk["blockPath"] = "/dev/"+block

        # calculate size (if available)
        if "Size" in udisk.keys():
            udisk["Size GB"] = str(int(udisk["Size"])/1e9)
        return udisk


    def isProtected(self,block):
        """ Return true if name is protected name """
        name = block["name"]
        return any([p in name for p in self.protected])

    def getListOfDrives(self):
        """ Get a list of mounted drives, save as self.blockData """
        # get generic output
        udiskOutput = run("lsblk -n -r").readlines()
        # get mounted blocknames
        blockNames = [s.split()[0] for s in udiskOutput]
        # get detailed info
        # all blocks
        self.blockData = [self.parseUdisk(b) for b in blockNames]
        # mounted, unprotected blocks
        self.blockDataMounted = [b for b in self.blockData if "MountPoints" in b]
        self.blockDataMounted = [b for b in self.blockDataMounted if b["MountPoints"]!=""]
        self.blockDataMounted = [b for b in self.blockDataMounted if not self.isProtected(b) ]
        # unmounted, unprotected blocks
        self.blockDataNotMounted = []
        for b in self.blockData:
            if self.isProtected(b): continue
            if "MountPoints" not in b: continue
            if b["MountPoints"]!="": continue
            self.blockDataNotMounted.append(b)
        # output
        print("Found blocks", blockNames)

    def makeMenuList(self,menu,nameFunc,actionFunc,blockData,highlightColor):
        """ Add entries of blockData to menu
            Labels are based on nameFunc(block)
            Action is actionFunc(block)
        """

        for block in blockData:
            label = Gtk.MenuItem()
            label.set_label(nameFunc(block))
            # if block is protected, change color, don't connect
            if any([p in block["name"] for p in self.protected]):
                label.modify_fg(Gtk.StateFlags.NORMAL,self.protectedFgColor)
            else:
                label.modify_fg(Gtk.StateFlags.NORMAL,highlightColor)
            label.connect("activate", actionFunc, block)
            menu.append(label)

    def notify(self,msg):
        """ Send notification msg """
        run('notify-send "{0}"'.format(msg))

    def mount(self,x, block):
        """ Mount block """
        if any([p in block["name"] for p in self.protected]):
            print("No mount")
            return
        print("Unmount", block["name"])
        run("udisksctl mount -b {0}".format(block["blockPath"]))
        self.notify("Drive {0} has mounted".format(block["name"]))
        print("Done")

    def unmount(self,x, block):
        """ Unmount block """
        if any([p in block["name"] for p in self.protected]):
            print("No unmount")
            return
        print("Unmount", block["name"])
        run("udisksctl unmount -b {0}".format(block["blockPath"]))
        self.notify("Drive {0} has unmounted".format(block["name"]))
        # time.sleep(4)
        # run("udisksctl power-off -b {0}".format(block["blockPath"]))
        print("Done")

    def infoLauncher(self,x, block):
        """ Information window popup """
        print("Information on", block["name"])
        win = infoWindow(block)
        win.show_all()

    def addMenuLabel(self,menu,text):
        """ Add neutral label to menu """
        label = Gtk.MenuItem()
        label.set_label(text)
        menu.append(label)

    def left_click_event(self,status):
        """ make popup menu for mounting/unmounting """
        self.getListOfDrives()
        # make menu
        self.menu = Gtk.Menu()
        self.addMenuLabel(self.menu,"Unmountable drives")
        nameFunc = lambda block: "Unmount {0} at {1}".format(block["name"],block["MountPoints"])
        self.makeMenuList(self.menu,nameFunc,self.unmount,self.blockDataMounted,self.unmountableColor)
        self.addMenuLabel(self.menu,"Mountable drives")
        nameFunc = lambda block: "Mount {0}".format(block["name"])
        self.makeMenuList(self.menu,nameFunc,self.mount,self.blockDataNotMounted,self.mountableColor)
        # add buttons to list
        self.menu.show_all()
        time = Gtk.get_current_event_time()
        self.menu.popup(None, None, None, self.status_icon, 1, time)

    def right_click_event(self, icon, button, time):
        """ make popup menu for additional drive info """
        self.getListOfDrives()
        nameFunc = lambda block: "Information on {0}".format(block["name"])
        # make menu
        self.menu = Gtk.Menu()
        self.makeMenuList(self.menu,nameFunc,self.infoLauncher,self.blockData,self.normalFgColor)
        # add buttons to list
        self.menu.show_all()
        print("=====: time",time)
        self.menu.popup(None, None, None, self.status_icon, 1, time)

    def show_about_dialog(self, widget):
        about_dialog = Gtk.AboutDialog()

        about_dialog.set_destroy_with_parent(True)
        about_dialog.set_name("StatusIcon Example")
        about_dialog.set_version("1.0")
        about_dialog.set_authors(["Andrew Steele"])

        about_dialog.run()
        about_dialog.destroy()

# popup window
class infoWindow(Gtk.Window):
    def __init__(self,block):
        self.block = block
        Gtk.Window.__init__(self, title="Info for disk")
        Gtk.Window.set_modal(self,1)
        self.set_default_size(500,500)

        # color
        x = 50000
        self.textBg = Color(x,x,x)
        self.codeColor = Color(0,0,x)

        # key press
        self.connect("key-press-event", self.keyPress)
        self.drawInfo()

    def keyPress(self, widget, ev, data=None):
        # if ev.keyval == Gdk.KEY_Escape: #If Escape pressed, reset text
        if ev.keyval == Gdk.KEY_q: #If Escape pressed, reset text
            self.destroy()

    def getDiskInfo(self):
        """ Get UUID, FSTYPE of rel block, return true if found """
        ls = run("lsblk -r -o NAME,UUID,FSTYPE").readlines()
        for line in ls:
            if len(line.split())<3: continue
            if line.split()[0]==self.block["name"]:
                self.uuid = line.split()[1]
                self.fstype = line.split()[2]
                return True
        return False

    def getSerial(self):
        """ Get serial number (and partition if available) of rel block, return true if found 
            Assumes serial number is first serial number? Seems okay
        """
        ls = run("udevadm info -a -n {0}".format(self.block["blockPath"])).readlines()
        self.serial=False
        self.partition=False
        for line in ls:
            if "partition" in line: 
                if len(line.split('"'))<2: continue
                self.partition=line.split('"')[1]
            if "serial" in line and self.serial==False: 
                if len(line.split('"'))<2: continue
                self.serial=line.split('"')[1]
        if self.serial: return True
        return False


    def drawInfo(self):
        """ Add info to window """
        notebook = Gtk.Notebook()

        #############################################
        #### Info page
        #############################################
        label   = Gtk.Label(label="Information", halign=Gtk.Align.START)
        grid = Gtk.Grid.new()
        self.makeLabel(grid,0,"<big><u><b>Output of: udisksctl info -b {0}</b></u></big>\n".format(self.block["blockPath"]),width=2,col=0,fgColor=None,wrap=None)
        for i,k in enumerate(self.block.keys()):
             i+=1
             self.makeLabel(grid,i,"<b>{0}</b>".format(k),col=0,align=Gtk.Align.START)
             self.makeLabel(grid,i,self.block[k],col=1,align=Gtk.Align.START,fgColor=self.codeColor,wrap=True,select=True)
        #
        notebook.append_page(grid,label)


        #############################################
        ### Instructions page
        #############################################
        grid = Gtk.Grid.new()
        label   = Gtk.Label(label="Instructions", halign=Gtk.Align.START)
        textLines=[]


        textLines.append({"copy":False,"text": "\n<big><b><u>Instructions for setting up mounting</u></b></big>"})
        textLines.append({"copy":False,"text": "<big><b>To implement the automatic mounting script</b></big>"})
        textLines.append({"copy":False,"text": "Edit (or create) the file /etc/udev/rules.d/50-harddrive.rules and add the following line (replacing capitals or regex). More info: udevadm info -a -n {0} <tt></tt>".format(self.block["blockPath"])})
        if self.getSerial():
            mountUsbPath = os.path.join(os.path.dirname(os.path.realpath(__file__)),"mountUsb.sh")
            if self.partition:
                udevRule = 'ACTION=="add",   KERNEL=="sd[a-z]*",ATTR{{partition}}=="{1}",ATTRS{{serial}}=="{0}",RUN+="/usr/bin/su USERNAME -c \\"{2} mount DRIVENAME %k\\""\n'.format(self.serial,self.partition,mountUsbPath)
                udevRule+= 'ACTION=="remove",KERNEL=="sd[a-z]*",ATTR{{partition}}=="{1}",ATTRS{{serial}}=="{0}",RUN+="/usr/bin/su USERNAME -c \\"{2} unmount DRIVENAME %k\\""'.format(self.serial,self.partition,mountUsbPath)
                textLines.append({"copy":True,"text": udevRule})
            else:
                udevRule = 'ACTION=="add",   KERNEL=="sd[a-z]*",ATTRS{{serial}}=="{0}",RUN+="/usr/bin/su USERNAME -c \\"{1} mount DRIVENAME %k\\""\n'.format(self.serial,mountUsbPath)
                udevRule+= 'ACTION=="remove",KERNEL=="sd[a-z]*",ATTRS{{serial}}=="{0}",RUN+="/usr/bin/su USERNAME -c \\"{1} unmount DRIVENAME %k\\""'.format(self.serial,mountUsbPath)
                textLines.append({"copy":True,"text": udevRule})
        else:
            textLines.append({"copy":False,"text": "<tt>Problem making command (this is probably a partition), run udevadm info -a -n {0}, find a suitable identifier, and follow the instructions in the info page for the main block (ie if this is sda1, look at sda)</tt>".format(self.block["blockPath"])})
        textLines.append({"copy":False,"text": "\n<big><b>To specify the default mounting location of a drive</b></big>"})
        textLines.append({"copy":False,"text": "You can change the fstab configuration, edit /etc/fstab and add the line (replacing the capitals). More info: lsblk -fnr."})
        if self.getDiskInfo():
            textLines.append({"copy":True,"text": "<tt>UUID={0} /HOME/PATH/TO/MOUNT auto nofail,x-systemd.device-timeout=1 0 2</tt>".format(self.uuid)})
            textLines.append({"copy":False,"text": "The filesystem type is {0}. If you can't read this fstype, change it to a Linux friendly fstype like ext4, and reload this window to get new UUIDs. For example:".format(self.fstype)})
            textLines.append({"copy":True,"text": "mkfs.ext4 {0}".format(self.block["blockPath"])})
        else:
            textLines.append({"copy":False,"text": "<tt>Problem making command, edit /etc/fstab</tt>"})
        textLines.append({"copy":False,"text": "You may also need to enable unauthenticated unmounting. See:"})
        textLines.append({"copy":True,"text": "https://askubuntu.com/questions/552503/stop-asking-for-authentication-to-mount-usb-stick"})

        

        #
        for i, textLine in enumerate(textLines):
            text = textLine["text"]+"\n"
            copyable = textLine["copy"]
            if copyable:
                self.makeLabel(grid,i,text, wrap=True,fgColor=self.codeColor,select=True)
            else:
                self.makeLabel(grid,i,text,wrap=True,align=Gtk.Align.START)
        notebook.append_page(grid,label)

        #############################################
        ### About page
        #############################################
        grid = Gtk.Grid.new()
        label   = Gtk.Label(label="About", halign=Gtk.Align.START)
        notebook.append_page(grid,label)
        self.makeLabel(grid,0,"\n<big><b>Mount Manager</b></big>\n2018, CERN")
        self.makeLabel(grid,1,"\n\n====\n\nAaron White\naaronsw@umich.edu")

        self.add(notebook)

    def makeLabel(self,grid,i,s,col=0,width=1,align=None,fgColor=None,wrap=None,select=False):
        l = Gtk.Label.new(s)
        l.set_hexpand(True)
        Gtk.Label.set_use_markup(l,True)
        if align: l.set_halign(align)
        if fgColor: l.modify_fg(Gtk.StateFlags.NORMAL,fgColor)
        if wrap: l.set_line_wrap(True)
        if select: l.set_selectable(True)
        grid.attach(l,col,i,width,1)
        return l

# for testing
# block = {'/org/freedesktop/UDisks2/block_devices/sdc': '', 'org.freedesktop.UDisks2.Block': '', 'CryptoBackingDevice': "'/'", 'Device': '/dev/sdc', 'DeviceNumber': '2080', 'Drive': "'/org/freedesktop/UDisks2/drives/WD_My_Passport_25E1_575847314131374A34523959'", 'HintAuto': 'true', 'HintIconName': '', 'HintIgnore': 'false', 'HintName': '', 'HintPartitionable': 'true', 'HintSymbolicIconName': '', 'HintSystem': 'false', 'IdLabel': '', 'IdType': 'ext4', 'IdUUID': '591542f5-676e-4233-a266-15ad3642d6bc', 'IdUsage': 'filesystem', 'IdVersion': '1.0', 'MDRaid': "'/'", 'MDRaidMember': "'/'", 'PreferredDevice': '/dev/sdc', 'ReadOnly': 'false', 'Size': '1000170586112', 'UserspaceMountOptions': '', 'org.freedesktop.UDisks2.Filesystem': '', 'MountPoints': '/home/prime/petitBox', 'name': 'sdc', 'blockPath': '/dev/sdc'}
# win = infoWindow(block)
# win.connect("destroy", Gtk.main_quit)
# win.show_all()

protected=["sda"]
app = MyStatusIconApp(protected)

Gtk.main()
